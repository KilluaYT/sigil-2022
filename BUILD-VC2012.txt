BUILDING SIGIL FROM SOURCE USING VISUAL STUDIO COMPILERS IN WINDOWS
-------------------------------------------------------------------

Note: Building SIGIL from source using MSVC in Windows is really quite a pain. The following instructions were used to build SIGIL using Visual Studio 10.0 on Windows 8 (not 8.1), so your approach may vary depending on which compiler or version of Windows you have. Unless you really need to build SIGIL from source, you should use the pre-compiled binaries instead.

SIGIL uses CMake, which is a cross-platform build tool. You will need to download and run the CMake "Windows Installer" (.msi). When the installer asks, make sure you add CMake to your PATH variable. You can download the installer from:

	https://cmake.org/download/

Next, download SIGIL. If you have git, you can use a command prompt:

	git clone git@gitlab.com:geoff-nagy/sigil.git

Otherwise, you can download the source code as a .zip file from:

	https://gitlab.com/geoff-nagy/sigil

SIGIL depends on the OpenGL Extension Wrangler (GLEW) library. Headers and pre-compiled libs are included with SIGIL in the /glew folder. Copy and paste the following files into the appropriate locations as below:

	sigil/glew/lib/msvc32/glew32.lib    ---> C:/Program Files (x86)/Microsoft Visual Studio 11.0/VC/lib/glew32.lib
	sigil/glew/include/GL/*.h           ---> C:/Program Files (x86)/Microsoft Visual Studio 11.0/VC/include/GL/*.h

We also need to get a copy of the FreeType 2 (FT2) library. Download and run the "Complete package, except sources" installer from 

	http://gnuwin32.sourceforge.net/packages/freetype.htm

to install FT2. Make sure that you install into

	C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC

and NOT

	C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\GnuWin32

or anywhere else, otherwise you may encounter difficulties when building SIGIL. You may have to manually edit out the "GnuWin32" portion.

We need OpenAL for audio. Download the "OpenAL 1.1 Core SDK (zip)" file from

	https://www.openal.org/downloads/

and extract and run the installer. When prompted, you should also run the OpenAL redistributable, which will place the OpenAL DLLs into your system folder. After all of this, copy the OpenAL header and library files into the proper locations:

	C:\Program Files (x86)\OpenAL 1.1 SDK\include\*.h             ---> C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\include\*.h
	C:\Program Files (x86)\OpenAL 1.1 SDK\libs\Win32\OpenAL32.lib ---> C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\lib\OpenAL32.lib

Next, we can start building SIGIL. Enter the directory "sigil" and create a folder called "build-vc2010".

Open CMake-GUI. For "Where is the source code", browse to the root directory "sigil". For "Where to build the binaries", browse to the directory "build-vc2010" that you created in the previous step.

Click "Configure". When prompted, select the "Visual Studio 11 2012" generator (not the IA64 or Win64 versions) from the drop-down list. Select "Use default native compilers", and click "Finish".

Assuming you followed the directions above correctly, you should not get any configuration errors. However, you can fix them by assigning the appropriate values to the given CMake variables. For your reference, these are the values that I use to compile SIGIL.

FREETYPE_INCLUDE_DIR_freetype2: C:/Program Files (x86)/Microsoft Visual Studio 11.0/VC/include/freetype2
FREETYPE_INCLUDE_DIR_ft2build: C:/Program Files (x86)/Microsoft Visual Studio 11.0/VC/include/freetype2
FREETYPE_LIBRARY: C:/Program Files (x86)/Microsoft Visual Studio 11.0/VC/lib/freetype.lib
GLEW_INCLUDE_DIR: C:/Program Files (x86)/Microsoft Visual Studio 11.0/VC/include
GLEW_LIBRARY: C:/Program Files (x86)/Microsoft Visual Studio 11.0/VC/lib/glew32.lib
OPENAL_INCLUDE_DIR: C:/Program Files (x86)/Microsoft Visual Studio 11.0/VC/include
OPENAL_LIBRARY: C:/Program Files (x86)/Microsoft Visual Studio 11.0/VC/lib/OpenAL32.lib

This will create the Visual Studio 2012 project file that can be used to build SIGIL. Navigate to "build-vc2012" and open the solution "sigil.sln".

In Visual Studio, select the build type "Release", and then click "Build -> Build Solution" from the top menu. This will create the files

	sigil/build-vc2012/Release/sigil.dll
	sigil/build-vc2012/Release/sigil.lib

It's probably now a good idea to put all of the necessary SIGIL files in a common location for you to copy into your SIGIL projects later on. This is the same process that I use when building and distributing SIGIL.

	C:/Program Files (x86)/Microsoft Visual Studio 11.0/VC/bin/freetype6.dll ---> sigil/sigil-vc2012/freetype6.dll
	C:/Windows/System32/OpenAL32.dll     ---> sigil/sigil-vc2012/OpenAL32.dll
	sigil/glew/lib/msvc32/glew32.dll     ---> sigil/sigil-vc2012/glew32.dll
	sigil/build-vc2012/Release/sigil.dll ---> sigil/sigil-vc2012/sigil.dll
	sigil/build-vc2012/Release/sigil.lib ---> sigil/sigil-vc2012/lib/sigil.lib

Now, please consult USING-SIGIL-VC2012.txt for instructions on how to integrate SIGIL into your applications.